version: "3"

services:
  db-node-1:
    image: mariadb
    container_name: db-node-1
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
    ports:
      - "3322:3306"
    volumes:
      - db-node-1-data:/var/lib/mysql
    healthcheck:
      test: "/usr/bin/mysql --user=${MYSQL_USER} 
--password=${MYSQL_PASSWORD} --execute \"SHOW DATABASES;\""
      timeout: 20s
      retries: 5
    networks:
      - arch-network

  db-node-2:
    image: mariadb
    container_name: db-node-2
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
    ports:
      - "3388:3306"
    volumes:
      - db-node-2-data:/var/lib/mysql
    healthcheck:
      test: "/usr/bin/mysql --user=${MYSQL_USER} 
--password=${MYSQL_PASSWORD} --execute \"SHOW DATABASES;\""
      timeout: 20s
      retries: 5
    networks:
      - arch-network

  db-node-service:
    image: mariadb
    container_name: db-node-service
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
    ports:
      - "3328:3306"
    volumes:
      - db-node-service-data:/var/lib/mysql
    healthcheck:
      test: "/usr/bin/mysql --user=${MYSQL_USER} 
--password=${MYSQL_PASSWORD} --execute \"SHOW DATABASES;\""
      timeout: 20s
      retries: 5
    networks:
      - arch-network

  proxysql:
    build:
      context: .
      dockerfile: docker/proxysql/Dockerfile
    container_name: proxysql
    volumes:
      - ./config/proxysql.cnf:/etc/proxysql.cnf
      - proxysql-data:/var/lib/proxysql
    ports:
      - "6032:6032"
      - "6033:6033"
    healthcheck:
      test: "/usr/bin/mysql --user=${MYSQL_USER} 
--password=${MYSQL_PASSWORD} --host=127.0.0.1 --port=6033 --execute \"SHOW 
DATABASES;\""
      timeout: 20s
      retries: 5
    depends_on:
      db-node-1:
        condition: service_healthy
      db-node-2:
        condition: service_healthy
      db-node-service:
        condition: service_healthy
    networks:
      - arch-network

  db-node-3:
    image: mariadb
    container_name: db-node-3
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
    ports:
      - "3337:3306"
    volumes:
      - db-node-3-data:/var/lib/mysql
    healthcheck:
      test: "/usr/bin/mysql --user=${MYSQL_USER} 
--password=${MYSQL_PASSWORD} --execute \"SHOW DATABASES;\""
      timeout: 20s
      retries: 5
    networks:
      - arch-network

  user-cache:
    image: redis:6.2-alpine
    container_name: user-cache
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning
    networks:
      - arch-network
    volumes:
      - redis-cache:/data

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - arch-network

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_CREATE_TOPICS: "user_queue:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      - arch-network

  auth-service:
    build:
      context: .
      dockerfile: docker/cpp_image/Dockerfile
    container_name: auth-service
    environment:
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - DB_PORT=${PROXYSQL_PORT}
      - DB_HOST=${PROXYSQL_HOST}
      - CACHE_HOST=user-cache
      - CACHE_PORT=6379
      - KAFKA_TOPIC=user_queue
      - KAFKA_CONNECTION_STR=kafka:9092
      - SERVICE_PORT=8081
      - SERVICE_EXE=/code/cpp/build/auth_service/auth_service
    ports:
      - "8081:8081"
    networks:
      - arch-network
    depends_on:
      proxysql:
        condition: service_healthy
      user-cache:
        condition: service_started
      kafka:
        condition: service_started

  kafka-consumer:
    build:
      context: .
      dockerfile: docker/cpp_image/Dockerfile
    container_name: kafka-consumer
    environment:
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - DB_PORT=${PROXYSQL_PORT}
      - DB_HOST=${PROXYSQL_HOST}
      - KAFKA_TOPIC=user_queue
      - KAFKA_CONNECTION_STR=kafka:9092
      - SERVICE_PORT=8088
      - SERVICE_EXE=/code/cpp/build/auth_service/kafka_consumer
    ports:
      - "8088:8088"
    networks:
      - arch-network
    depends_on:
      auth-service:
        condition: service_started

  product-service:
    build:
      context: .
      dockerfile: docker/cpp_image/Dockerfile
    container_name: product-service
    environment:
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - DB_PORT=${DB_PORT}
      - DB_HOST=${DB_HOST}
      - SERVICE_PORT=8082
      - AUTH_SERVICE_PORT=${AUTH_SERVICE_PORT}
      - AUTH_SERVICE_HOST=${AUTH_SERVICE_HOST}
      - SERVICE_EXE=/code/cpp/build/product_service/product_service
    ports:
      - "8082:8082"
    networks:
      - arch-network
    depends_on:
      db-node-3:
        condition: service_healthy
      auth-service:
        condition: service_started

  cart-service:
    build:
      context: .
      dockerfile: docker/cpp_image/Dockerfile
    container_name: cart-service
    environment:
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - DB_PORT=${DB_PORT}
      - DB_HOST=${DB_HOST}
      - SERVICE_PORT=8083
      - AUTH_SERVICE_PORT=${AUTH_SERVICE_PORT}
      - AUTH_SERVICE_HOST=${AUTH_SERVICE_HOST}
      - SERVICE_EXE=/code/cpp/build/cart_service/cart_service
    ports:
      - "8083:8083"
    networks:
      - arch-network
    depends_on:
      db-node-3:
        condition: service_healthy
      auth-service:
        condition: service_started
      product-service:
        condition: service_started

volumes:
  db-node-1-data:
  db-node-2-data:
  db-node-service-data:
  db-node-3-data:
  proxysql-data:
  redis-cache:


networks:
  arch-network:
    driver: "bridge"
    external: false
